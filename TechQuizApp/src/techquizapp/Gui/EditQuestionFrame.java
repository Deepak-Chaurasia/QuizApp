/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package techquizapp.Gui;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import edu.cmu.sphinx.api.SpeechResult;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import speechrecog.LoginSR;
import techquizapp.Dao.QuestionDao;
import techquizapp.Pojo.AnswerStorePojo;
import techquizapp.Pojo.ExamPojo;
import techquizapp.Pojo.QuestionPojo;
import techquizapp.Pojo.QuestionStore;
import techquizapp.Pojo.UserProfile;

/**
 *
 * @author DeepakChaurasia
 */
public class EditQuestionFrame extends javax.swing.JFrame {

    private ExamPojo exam;
    private QuestionStore qstore;
    private String question, option1, option2, option3, option4, correctOption;
    private HashMap<String, String> options;
    private int qno, pos = 0, count = 0, no = 0;

    private TextToVoice tv;
    private VoiceToText vt;

    public EditQuestionFrame() {
        this.setUndecorated(true);
        initComponents();
        this.setLocationRelativeTo(null);
        lblUsername.setText("Hello : " + UserProfile.getUsername());

        qstore = new QuestionStore();
        options = new HashMap<>();
        options.put("Option1", "Answer 1");
        options.put("Option2", "Answer 2");
        options.put("Option3", "Answer 3");
        options.put("Option4", "Answer 4");
        qno = 1;
        lblQno.setText(lblQno.getText()+" "+ qno);

        tv = new TextToVoice();
        tv.speech = "Question editing panel";
        tv.start();
        vt = new VoiceToText();
        vt.start();
    }

    public EditQuestionFrame(ExamPojo exam) {
        this();
        this.exam = exam;
        lblTitle.setText(exam.getLanguage().toUpperCase() + " PAPER");
        loadQuestions();
        showQuestion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        lblTitle = new javax.swing.JLabel();
        txtOption1 = new javax.swing.JTextField();
        txtOption2 = new javax.swing.JTextField();
        txtOption3 = new javax.swing.JTextField();
        txtOption4 = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblQno = new javax.swing.JLabel();
        btnDone = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jcCorrectOption = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1080));

        txtQuestion.setColumns(20);
        txtQuestion.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        txtQuestion.setRows(5);
        jScrollPane1.setViewportView(txtQuestion);

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 0));
        lblTitle.setText("Edit Question");

        txtOption1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        txtOption2.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        txtOption3.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        txtOption4.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        txtOption4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOption4ActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(255, 255, 255));
        btnNext.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnNext.setForeground(new java.awt.Color(102, 0, 102));
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(102, 0, 102));
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblQno.setBackground(new java.awt.Color(0, 0, 0));
        lblQno.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblQno.setForeground(new java.awt.Color(255, 255, 0));
        lblQno.setText("Qusetion no");

        btnDone.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnDone.setForeground(new java.awt.Color(102, 0, 102));
        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        lblUsername.setBackground(new java.awt.Color(0, 0, 0));
        lblUsername.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 0));
        lblUsername.setText("jLabel1");

        lblLogout.setBackground(new java.awt.Color(0, 0, 0));
        lblLogout.setFont(new java.awt.Font("Tahoma", 0, 25)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(255, 255, 0));
        lblLogout.setText("Logout");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLogoutMouseExited(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Correct Option");

        jcCorrectOption.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jcCorrectOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Option1", "Option2", "Option3", "Option4", " " }));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("Option 1");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 0));
        jLabel4.setText("Option 3");

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 0));
        jLabel5.setText("Option 2");

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 0));
        jLabel6.setText("Option 4");

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnPrevious.setForeground(new java.awt.Color(102, 0, 102));
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(612, 612, 612)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(302, 302, 302)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(609, 609, 609)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(308, 308, 308)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(563, 563, 563)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcCorrectOption, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtOption3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtOption4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtOption1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(237, 237, 237)
                                        .addComponent(txtOption2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(437, 437, 437)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblQno, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(356, 356, 356)
                                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114)
                                .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(131, 131, 131)
                                .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(129, 129, 129)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 417, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(802, 802, 802))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLogout)
                    .addComponent(lblUsername))
                .addGap(45, 45, 45)
                .addComponent(lblTitle)
                .addGap(24, 24, 24)
                .addComponent(lblQno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOption1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOption2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOption3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOption4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcCorrectOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious)
                    .addComponent(btnDone)
                    .addComponent(btnCancel))
                .addGap(117, 117, 117))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtOption4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOption4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOption4ActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (validateInput() == false) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Cannnot add question!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String optionName = options.get(correctOption);
        QuestionPojo newQuestion = new QuestionPojo(exam.getExamId(), qno, exam.getLanguage(), option1, option2, option3, option4, optionName, question);
        System.out.println(newQuestion);

        QuestionPojo question = qstore.getQuestion(pos);
        System.out.println(question);

        if (!newQuestion.equals(question)) {
            int p = qstore.removeQuestion(question);
            qstore.setQuestionAt(p, newQuestion);
            count++;
        }
        pos++;
        if (pos >= qstore.getCount()) {
            pos = 0;
        }
        qno++;
        if (qno > qstore.getCount()) {
            qno = 1;
        }
        lblQno.setText("Question no: " + qno);
        showQuestion();
    }//GEN-LAST:event_btnNextActionPerformed

    private void lblLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseClicked
        tv.changeState();
        this.dispose();
        LoginFrame optionsFrame = new LoginFrame();
        optionsFrame.setVisible(true);
        vt.stop();
    }//GEN-LAST:event_lblLogoutMouseClicked

    private void lblLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseEntered
        lblLogout.setForeground(Color.WHITE);
        Font f = new Font("Tohoma", Font.ITALIC, 25);
        lblLogout.setFont(f);
    }//GEN-LAST:event_lblLogoutMouseEntered

    private void lblLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseExited
        lblLogout.setForeground(new Color(255, 255, 0));
        Font f = new Font("Tohoma", Font.PLAIN, 25);
        lblLogout.setFont(f);
    }//GEN-LAST:event_lblLogoutMouseExited

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        tv.changeState();
        EditPaperFrame paperFrame = new EditPaperFrame();
        paperFrame.setVisible(true);
        this.dispose();
        vt.stop();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        if (validateInput() == false) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Cannnot add question!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String optionName = options.get(correctOption);
        QuestionPojo newQuestion = new QuestionPojo(exam.getExamId(), qno, exam.getLanguage(), option1, option2, option3, option4, optionName, question);
        System.out.println(newQuestion);

        QuestionPojo question = qstore.getQuestion(pos);
        System.out.println(question);

        if (!newQuestion.equals(question)) {
            int p = qstore.removeQuestion(question);
            qstore.setQuestionAt(p, newQuestion);
            count++;
        }
        pos--;
        if (pos == -1) {
            pos = qstore.getCount() - 1;
        }
        qno--;
        if (qno == 0) {
            qno = qstore.getCount();
        }
        lblQno.setText("Question no: " + qno);
        showQuestion();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        if (validateInput() == false) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Cannnot add question!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String optionName = options.get(correctOption);
        QuestionPojo newQuestion = new QuestionPojo(exam.getExamId(), qno, exam.getLanguage(), option1, option2, option3, option4, optionName, question);
        System.out.println(newQuestion);

        QuestionPojo question = qstore.getQuestion(pos);
        System.out.println(question);

        if (!newQuestion.equals(question)) {
            int p = qstore.removeQuestion(question);
            qstore.setQuestionAt(p, newQuestion);
            count++;
        }
        if (count != 0) {
            try {

                ArrayList<QuestionPojo> questionListNew = QuestionDao.getQuestionsByExamId(exam.getExamId());
                ArrayList<QuestionPojo> questionListOld = qstore.getAllQuestions();
                int i = qstore.getCount(), j = 0, k = 0;
                while (i > 0) {
                    if (!questionListOld.get(j).equals(questionListNew.get(j))) {
                        QuestionDao.updateQuestion(qstore.getQuestion(j), exam.getExamId(), j + 1);
                        System.out.println("Question no :" + (j + 1));
                        k++;
                    }
                    i--;
                    j++;
                }
                JOptionPane.showMessageDialog(null, k + " Questions Updated", "Success!", JOptionPane.INFORMATION_MESSAGE);

                System.out.println(tv.isAlive());
                tv = new TextToVoice();
                tv.speech = "paper updated successfully ";
                tv.start();
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(EditQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                EditPaperFrame paperFrame = new EditPaperFrame();
                paperFrame.setVisible(true);
                this.dispose();
                vt.stop();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error while connecting to database!", "Exception!", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditQuestionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcCorrectOption;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblQno;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtOption1;
    private javax.swing.JTextField txtOption2;
    private javax.swing.JTextField txtOption3;
    private javax.swing.JTextField txtOption4;
    private javax.swing.JTextArea txtQuestion;
    // End of variables declaration//GEN-END:variables

    public void loadQuestions() {
        try {
            ArrayList<QuestionPojo> questionList = QuestionDao.getQuestionsByExamId(exam.getExamId());
            for (QuestionPojo obj : questionList) {
                qstore.addQuestion(obj);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error while connecting to database!", "Exception!", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    public void showQuestion() {
        QuestionPojo question = qstore.getQuestion(pos);

        txtQuestion.setText(question.getQuestion());
        txtOption1.setText(question.getAnswer1());
        txtOption2.setText(question.getAnswer2());
        txtOption3.setText(question.getAnswer3());
        txtOption4.setText(question.getAnswer4());

        String chosenAnswer = question.getCorrectAnswer();
        System.out.println("correct " + chosenAnswer);
        switch (chosenAnswer) {
            case "Answer 1":
                jcCorrectOption.setSelectedIndex(0);
                break;
            case "Answer 2":
                jcCorrectOption.setSelectedIndex(1);
                break;
            case "Answer 3":
                jcCorrectOption.setSelectedIndex(2);
                break;
            case "Answer 4":
                jcCorrectOption.setSelectedIndex(3);
                break;
        }
    }

    public boolean validateInput() {
        question = txtQuestion.getText().trim();
        option1 = txtOption1.getText().trim();
        option2 = txtOption2.getText().trim();
        option3 = txtOption3.getText().trim();
        option4 = txtOption4.getText().trim();
        correctOption = jcCorrectOption.getSelectedItem().toString();

        if (question.isEmpty() || option1.isEmpty() || option2.isEmpty() || option3.isEmpty() || option4.isEmpty()) {
            return false;
        } else {
            return true;
        }
    }  

    class TextToVoice extends Thread {

        public static final String VOICENAME = "kevin16";
        private Voice voice;
        public String speech = "";

        public void run() {

            try {
                Thread.sleep(700);
                //Voice voice;
                VoiceManager vm = VoiceManager.getInstance();
                voice = vm.getVoice(VOICENAME);
                voice.allocate();
                voice.speak(speech);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void changeState() {
            voice.deallocate();
        }
    }
    
    class VoiceToText extends Thread {
        private boolean flag = true;
        public void run() {
            try {
                Thread.sleep(500);
                //LoginSR s = new LoginSR();
                while (flag) {
                    String speech = LoginSR.speech();
                    System.out.println("speech: Edit Question "+speech);
                    if (speech.equalsIgnoreCase("option one")) {
                        jcCorrectOption.setSelectedIndex(0);
                    } else if (speech.equalsIgnoreCase("option two")) {
                        jcCorrectOption.setSelectedIndex(1);
                    } else if (speech.equalsIgnoreCase("option three")) {
                        jcCorrectOption.setSelectedIndex(2);
                    } else if (speech.equalsIgnoreCase("option four")) {
                        jcCorrectOption.setSelectedIndex(3);
                    } else if (speech.equalsIgnoreCase("<unk>")); else if (speech.equalsIgnoreCase("logout")) {
                        disposeMethod();
                    } else if (speech.equalsIgnoreCase("done")) {
                        btnDone.doClick();
                    } else if (speech.equalsIgnoreCase("next")) {
                        btnNext.doClick();
                    } else if (speech.equalsIgnoreCase("cancel")) {
                        btnCancel.doClick();
                    }  else if (speech.equalsIgnoreCase("previous")) {
                        btnPrevious.doClick();
                    }else;
                }
                //recognizer.stopRecognition();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void disposeMethod() {
        this.dispose();
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true);
        vt.stop();
    }
}
